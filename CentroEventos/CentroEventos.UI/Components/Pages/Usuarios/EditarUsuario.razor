@rendermode InteractiveServer
@inject AgregarUsuarioUseCase AgregarUsuarioUseCase
@inject ModificarUsuarioUseCase ModificarUsuarioUseCase
@if(visible)
{
    <div class="Contenedor">
        <div class="Datos">
            <h1>@(accion ? "Agregar Usuario" : "Modificar Usuario")</h1>
            @if(!poseePermiso ||error)
            {
                <pre>@mensaje</pre>
            }
            <div class="Salir">
                <button class="bi bi-x-circle fs-2 d-flex align-items-center" aria-hidden="true" @onclick="Close"></button>
            </div>
            <div class="Recuadros">
                <input type="text"placeholder="Nombre"@bind="nom" /><br>
                <input type="text" placeholder="Apellido"@bind="ape" /><br>
                <input type="text" placeholder="Email"@bind="email" /><br>
                <input type="password" placeholder="Contraseña"@bind="cont" /><br>
            </div>
            <button class="btn btn-primary" @onclick="Editar">@(accion ? "Agregar Usuario" : "Modificar Usuario")</button>
        </div>
    </div>
}
@code
{
    int? id;
    string? nom;
    string? ape;
    string? email;
    string? cont;
    bool poseePermiso=true;
    bool error=false;
    bool accion;
    string? mensaje;
    private bool visible=false;
    EditarPermisos editarPermisos = null!;
    public void Mostrar(bool accion,Usuario? u=null)
    {
        visible=true;
        this.accion = accion;
        if (u is not null)
        {
            nom  = u.Nombre;
            ape  = u.Apellido;
            email = u.Email;
            cont  = u.Contraseña;
            id = u.ID;
        }
        else
        {
            nom = ape = email = cont = null;
            id = null;
        }
        StateHasChanged();
    }
    [Parameter] public EventCallback OnUsuarioAgregado { get; set; }

    void Editar()
    {
        try
        {
            if(accion)
            {
                AgregarUsuarioUseCase.Ejecutar(new Usuario(nom,ape,email,cont));
            }
            else
            {
                ModificarUsuarioUseCase.Ejecutar(new Usuario(id ??0,nom,ape,email,cont),Usuario.s_Actual!=null ? Usuario.s_Actual.ID:0);
            }
            StateHasChanged();
            OnUsuarioAgregado.InvokeAsync(); 
            visible = false;
        }
        catch(FalloAutorizacionException e)
        {
            poseePermiso=false;
            mensaje=e.Message;
        }
        catch(Exception e)
        {
            error=true;
            mensaje=e.Message;
        }
    }
    public void Close()
    {
        visible=false;
        poseePermiso=true;
        error=false;
    }
}
