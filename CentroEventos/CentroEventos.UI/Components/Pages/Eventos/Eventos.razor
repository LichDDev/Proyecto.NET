@page "/Eventos"
@rendermode InteractiveServer
@inject AgregarEventoDeportivoUseCase AgregarEventoDeportivoUseCase
@inject EliminarEventoDeportivoUseCase EliminarEventoDeportivoUseCase
@inject ModificarPersonaUseCase ModificarEventoDeportivoUseCase
@inject ListarEventosDeportivosUseCase ListarEventosDeportivosUseCase
@inject ListarEventosConCupoDisponibleUseCase ListarEventosConCupoDisponibleUseCase
<EliminarEvento @ref="eliminar"/>
<PageTitle>Eventos</PageTitle>
<h1>Eventos</h1>
<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>NOMBRE</th>
            <th>DESCRIPCION</th>
            <th>FECHA INICIO</th>
            <th>DURACION(HORAS)</th>
            <th>CUPO MAXIMO</th>
            <th>RESPONSABLE ID</th>
            <td>
                <button class="btn btn-primary" @onclick="()=>tipoDeLista=!tipoDeLista">@(tipoDeLista ? "Solo eventos con cupos" : "Todos los eventos")</button>
            </td>
        </tr>
    </thead>
    <tbody>
        @foreach(var e in _lista)
        {
            <tr>
                <td>@e.ID</td>
                <td>@e.Nombre</td>
                <td>@e.Descripcion</td>
                <td>@e.FechaHoraInicio</td>
                <td>@e.DuracionHoras</td>
                <td>@e.CupoMaximo</td>
                <td>@e.ResponsableId</td>
                <td>
                    <button class="btn btn-primary" @onclick="()=>Editar(e)">Editar</button>
                    <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(e)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    <button class="btn btn-primary" @onclick="Agregar">Agregar Evento</button>
    <EditarEvento @ref="editar" OnEventoAgregado="RefrescarLista" />
</div>
@code {
    bool tipoDeLista=true;
    List<EventoDeportivo> _lista=new List<EventoDeportivo>();
    protected override void OnInitialized()
    {
        if(tipoDeLista)
            _lista=ListarEventosDeportivosUseCase.Ejecutar();
        else
            _lista=ListarEventosConCupoDisponibleUseCase.Ejecutar();
    }
    EditarEvento editar=null!;
    EliminarEvento eliminar=null!;
    public void Agregar()
    {
        editar.Mostrar(true);
        StateHasChanged();
    }
    public void Editar(EventoDeportivo e)
    {
        editar.Mostrar(false,e);
        StateHasChanged();
    }
    public void ConfirmarEliminacion(EventoDeportivo e)
    {
        eliminar.Mensaje=$"Â¿Desea eliminar el evento {e.Nombre}?";
        eliminar.OnConfirmado=EventCallback.Factory.Create(this,()=>Eliminar(e));
        eliminar.Mostrar(false);
    }
    private void Eliminar(EventoDeportivo e)
    {
        try
        {
            EliminarEventoDeportivoUseCase.Ejecutar(e.ID,Usuario.s_miId);
        }
        catch(FalloAutorizacionException ex)
        {
            eliminar.Mensaje=ex.Message;
            eliminar.Mostrar(true);
        }
        catch(Exception ex)
        {
            eliminar.Mensaje=ex.Message;
            eliminar.Mostrar(true);
        }
        _lista = ListarEventosDeportivosUseCase.Ejecutar();
    }
    void RefrescarLista()
    {
        if(tipoDeLista)
            _lista = ListarEventosDeportivosUseCase.Ejecutar();
        else
            _lista = ListarEventosConCupoDisponibleUseCase.Ejecutar();
        StateHasChanged();
    }
}